multi-threading -- inside the thread class:

in public static main() , u need to put the first url.

one thread class - it will keep adding to queue
--> one array gives ex 5 links, again each gives 5 more,  each returns a string_array  
 add this to a public queue. from each string_array, loop through and push to the queue.
  YOu'll need to create an object for each string_array which is retured.

--> second thread class : some three threads, for example, will pop from queue, and implement the actual implementation.

https://beginnersbook.com/2014/08/how-to-iterate-over-a-sethashset/

https://www.baeldung.com/java-semaphore
We can use semaphores to limit the number of concurrent threads accessing a specific resource.

Put main thread to sleep: https://examples.javacodegeeks.com/core-java/java-thread-sleep-example/


Java timeout execution after certain seconds: 
https://stackoverflow.com/questions/4252187/how-to-stop-execution-after-a-certain-time-in-java

sample urls used: http://www.comfortmosquitonet.com/shop/      https://www.akshayah.co.in/
*************************************************
*************************************************
Wait for threads in a thread pool --- finally answer to the problem after a night full of headache.
https://www.baeldung.com/java-executor-wait-for-threads
threadPool.awaitTermination(60, TimeUnit.SECONDS)

		while(!sd_obj.syn_set.isEmpty())
		{
			pool.execute(wa_obj);
			pool.awaitTermination(1, TimeUnit.SECONDS);					// This is important to keep the while loop spinning out of control.
		}
 
*************************************************
*************************************************
